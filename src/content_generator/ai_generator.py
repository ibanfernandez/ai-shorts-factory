"""
Generador de contenido usando IA para YouTube.
Soporte para OpenAI (pago) y Ollama (local gratuito).
"""

import openai
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass
from config.settings import settings, CONTENT_TEMPLATES

# Importar Ollama generator
try:
    from .ollama_generator import OllamaGenerator, OllamaConfig
    OLLAMA_AVAILABLE = True
except ImportError:
    OLLAMA_AVAILABLE = False
try:
    from config.localization import (
        get_current_config, get_theme_config, 
        get_localized_texts, DEFAULT_LANGUAGE, DEFAULT_THEME
    )
except ImportError:
    # Fallback
    DEFAULT_LANGUAGE = "es"
    DEFAULT_THEME = "curiosidades"
    def get_current_config():
        return {"language": "es", "theme": "curiosidades"}
    def get_theme_config(theme=None, lang=None):
        return {"content_types": ["TOP_5"], "tags_base": ["viral"]}
    def get_localized_texts(lang=None):
        return {"hashtags": ["#Shorts", "#Viral"]}

logger = logging.getLogger(__name__)

@dataclass
class ContentRequest:
    """Solicitud de generaci√≥n de contenido."""
    content_type: str  # Din√°mico seg√∫n configuraci√≥n
    topic: str
    target_duration: int = 45  # 45 segundos para Shorts
    language: str = DEFAULT_LANGUAGE  # Configurable
    target_audience: str = "general"
    theme: str = DEFAULT_THEME  # Tem√°tica configurable

@dataclass
class GeneratedContent:
    """Contenido generado por IA."""
    title: str
    script: str
    description: str
    tags: List[str]
    thumbnail_suggestions: List[str]
    estimated_duration: int
    seo_score: float

class ContentGenerator:
    """Generador de contenido principal con soporte OpenAI y Ollama."""
    
    def __init__(self, language: str = None, theme: str = None, use_ollama: bool = None):
        """
        Inicializa el generador.
        
        Args:
            language: Idioma del contenido
            theme: Tema del contenido  
            use_ollama: Si usar Ollama (None = auto-detectar)
        """
        # Configuraci√≥n localizada
        self.language = language or settings.LANGUAGE
        self.theme = theme or settings.THEME
        self.config = get_current_config()
        self.theme_config = get_theme_config(self.theme, self.language)
        self.texts = get_localized_texts(self.language)
        
        # Configurar proveedores de IA
        self.ollama_generator = None
        self.use_ollama = use_ollama
        
        # Auto-detectar mejor opci√≥n si no se especifica
        if use_ollama is None:
            self.use_ollama = self._auto_select_ai_provider()
        
        if self.use_ollama and OLLAMA_AVAILABLE:
            try:
                self.ollama_generator = OllamaGenerator()
                if self.ollama_generator.is_installed:
                    logger.info("‚úÖ Usando Ollama (IA local gratuita)")
                else:
                    logger.warning("Ollama no disponible, usando OpenAI")
                    self.use_ollama = False
            except Exception as e:
                logger.warning(f"Error configurando Ollama: {e}")
                self.use_ollama = False
        
        # Configurar OpenAI como fallback
        if not self.use_ollama:
            if not settings.OPENAI_API_KEY:
                raise ValueError("Se necesita OPENAI_API_KEY o instalar Ollama para funcionar")
            openai.api_key = settings.OPENAI_API_KEY
            logger.info("üí≥ Usando OpenAI (servicio de pago)")
        
        logger.info(f"ContentGenerator inicializado - Proveedor: {'Ollama' if self.use_ollama else 'OpenAI'}")
    
    def _auto_select_ai_provider(self) -> bool:
        """Auto-selecciona el mejor proveedor de IA disponible."""
        # Prioridad: Ollama (gratis) > OpenAI (pago)
        if OLLAMA_AVAILABLE:
            try:
                test_generator = OllamaGenerator()
                if test_generator.is_installed:
                    logger.info("üéØ Auto-seleccionado: Ollama (gratuito)")
                    return True
            except:
                pass
        
        if settings.OPENAI_API_KEY:
            logger.info("üéØ Auto-seleccionado: OpenAI (de pago)")
            return False
        
        raise ValueError("No hay proveedores de IA disponibles. Instala Ollama o configura OPENAI_API_KEY")
    
    def _build_localized_prompt(self, request: ContentRequest) -> dict:
        """Construye prompts localizados basados en configuraci√≥n."""
        # Usar configuraci√≥n localizada
        content_types = self.theme_config.get("content_types", ["TOP_5"])
        if request.content_type not in content_types:
            request.content_type = content_types[0]  # Usar el primero disponible
            
        hashtags = " ".join(self.texts.get("hashtags", ["#Shorts", "#Viral"]))
        
        system_prompt = f"""Eres un experto creador de contenido para YouTube Shorts en {self.config['language_config']['name']}. 
        Especial√≠zate en {self.theme_config.get('description', 'contenido viral')} para el canal '{self.theme_config.get('channel_name', 'Canal Viral')}'.
        Crea contenido viral, interesante y bien estructurado."""
        
        user_prompt = f"""Crea un gui√≥n para un YouTube SHORT sobre "{request.content_type.replace('_', ' ')} {request.topic}" (m√°ximo {request.target_duration} segundos).

        REQUISITOS:
        1. T√≠tulo llamativo ({hashtags})
        2. Gancho inicial potente (primeros 3 segundos)
        3. Formato {request.content_type.replace('_', ' ')} din√°mico 
        4. Transiciones r√°pidas y enganchantes
        5. Call-to-action final
        6. Idioma: {self.config['language_config']['name']}
        
        Usa frases como: {', '.join(self.texts.get('intro_phrases', ['¬øSab√≠as que...'])[:2])}
        
        FORMATO:
        T√çTULO: [t√≠tulo viral con emojis]
        NARRACI√ìN: [SOLO el texto que el locutor debe leer, SIN instrucciones t√©cnicas, SIN descripciones de im√°genes, SIN tiempos - solo texto narrativo puro para TTS]
        DESCRIPCI√ìN: [descripci√≥n SEO]
        TAGS: [5-8 tags]
        THUMBNAIL: [3 sugerencias]"""
        
        return {"system": system_prompt, "user": user_prompt}

    def generate_content(self, request: ContentRequest) -> GeneratedContent:
        """
        Genera contenido completo para YouTube.
        
        Args:
            request: Solicitud de contenido
            
        Returns:
            GeneratedContent: Contenido completo generado
        """
        logger.info(f"Generando contenido: {request.content_type} - {request.topic}")
        
        try:
            # Validar y ajustar tema si es necesario
            validated_request = self._validate_and_fix_topic(request)
            
            # Obtener template apropiado
            template = CONTENT_TEMPLATES.get(validated_request.content_type)
            if not template:
                raise ValueError(f"Tipo de contenido no soportado: {validated_request.content_type}")
            
            # Generar gui√≥n principal
            raw_content = self._generate_script(validated_request, template)
            
            # Extraer elementos espec√≠ficos del contenido generado
            title = self._extract_title(raw_content)
            script = self._extract_narration(raw_content)  # SOLO narraci√≥n para TTS
            description = self._generate_description(script, validated_request.topic)
            tags = self._generate_tags(validated_request.topic, validated_request.content_type)
            thumbnail_suggestions = self._generate_thumbnail_ideas(validated_request.topic)
            
            # Calcular duraci√≥n estimada basada en narraci√≥n pura
            estimated_duration = self._estimate_duration(script)
            
            # Calcular score SEO b√°sico
            seo_score = self._calculate_seo_score(title, description, tags)
            
            content = GeneratedContent(
                title=title,
                script=script,  # Ahora contiene SOLO la narraci√≥n
                description=description,
                tags=tags,
                thumbnail_suggestions=thumbnail_suggestions,
                estimated_duration=estimated_duration,
                seo_score=seo_score
            )
            
            logger.info(f"Contenido generado exitosamente. Duraci√≥n: {estimated_duration}s")
            return content
            
        except Exception as e:
            logger.error(f"Error generando contenido: {e}")
            raise
    
    def _validate_and_fix_topic(self, request: ContentRequest) -> ContentRequest:
        """
        Valida el tema y lo reemplaza con alternativas seguras si es problem√°tico.
        
        Args:
            request: Solicitud original
            
        Returns:
            ContentRequest: Solicitud con tema validado/corregido
        """
        original_topic = request.topic.lower()
        
        # Lista de palabras problem√°ticas que causan rechazo
        problematic_keywords = [
            'alimentos', 'suplementos', 'medicamentos', 'f√°rmacos', 'pastillas',
            'adelgazar', 'dieta', 'peso', 'grasa', 'm√∫sculo', 'prote√≠na',
            'vitaminas', 'energ√≠a inmediatamente', 'salud', 'curar', 'sanar',
            'medicina', 'tratamiento', 'terapia', 'remedio', 'dosis'
        ]
        
        # Verificar si el tema contiene palabras problem√°ticas
        is_problematic = any(keyword in original_topic for keyword in problematic_keywords)
        
        if is_problematic:
            logger.warning(f"‚ö†Ô∏è Tema problem√°tico detectado: '{request.topic}' - Generando alternativa segura...")
            
            # Temas alternativos seguros y virales por categor√≠a
            safe_alternatives = {
                "TOP_5": [
                    "lugares m√°s misteriosos del mundo",
                    "datos curiosos sobre el espacio",
                    "animales m√°s raros del planeta", 
                    "lugares abandonados m√°s escalofriantes",
                    "misterios sin resolver de la historia",
                    "fen√≥menos naturales m√°s extra√±os",
                    "civilizaciones perdidas m√°s fascinantes",
                    "tecnolog√≠as del futuro m√°s incre√≠bles",
                    "record mundiales m√°s sorprendentes",
                    "curiosidades sobre los oc√©anos"
                ],
                "CURIOSIDADES": [
                    "datos sorprendentes sobre el universo",
                    "misterios de las pir√°mides",
                    "secretos de la naturaleza",
                    "curiosidades sobre los dinosaurios", 
                    "fen√≥menos inexplicables",
                    "datos curiosos sobre los gatos",
                    "misterios del cerebro humano",
                    "curiosidades sobre la m√∫sica",
                    "secretos de la f√≠sica cu√°ntica",
                    "datos raros sobre el tiempo"
                ]
            }
            
            # Seleccionar tema alternativo basado en el tipo de contenido
            alternatives = safe_alternatives.get(request.content_type, safe_alternatives["TOP_5"])
            
            # Usar hash del tema original para selecci√≥n consistente
            import hashlib
            topic_hash = int(hashlib.md5(original_topic.encode()).hexdigest()[:8], 16)
            selected_topic = alternatives[topic_hash % len(alternatives)]
            
            logger.info(f"‚úÖ Tema alternativo seleccionado: '{selected_topic}'")
            
            # Crear nueva solicitud con tema seguro
            return ContentRequest(
                content_type=request.content_type,
                topic=selected_topic,
                target_duration=request.target_duration,
                language=request.language,
                target_audience=request.target_audience,
                theme=request.theme
            )
        
        # Si el tema es seguro, retornar sin cambios
        return request
    
    def _generate_script(self, request: ContentRequest, template: Dict) -> str:
        """Genera el gui√≥n principal usando Ollama u OpenAI."""
        
        if self.use_ollama and self.ollama_generator:
            # Usar Ollama (gratuito)
            logger.info("üÜì Generando con Ollama (IA local)")
            
            ollama_result = self.ollama_generator.generate_shorts_script(
                topic=request.topic,
                language=self.language,
                content_type=request.content_type,
                topic_data=getattr(request, 'topic_data', None)
            )
            
            if ollama_result:
                return ollama_result["script"]
            else:
                logger.warning("Ollama fall√≥, usando OpenAI como fallback")
                self.use_ollama = False
        
        # Usar OpenAI (de pago) 
        logger.info("üí≥ Generando con OpenAI")
        
        prompt = template["user_prompt"].format(
            topic=request.topic,
            duration=request.target_duration // 60  # Convertir a minutos
        )
        
        try:
            # OpenAI v1.x syntax
            client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)
            response = client.chat.completions.create(
                model=settings.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": template["system_prompt"]},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=settings.OPENAI_MAX_TOKENS,
                temperature=0.8,
                top_p=0.9
            )
            
            content = response.choices[0].message.content.strip()
            
            # Detectar si la IA rechaz√≥ la solicitud
            if self._is_ai_rejection(content):
                logger.warning(f"üö´ IA rechaz√≥ el contenido: '{request.topic}' - Generando contenido gen√©rico")
                logger.info(f"üìù Contenido rechazado original: '{content[:100]}...'")
                
                # CR√çTICO: Generar y retornar contenido alternativo v√°lido
                fallback_content = self._generate_fallback_content(request)
                logger.info(f"‚úÖ Contenido alternativo generado exitosamente: '{fallback_content[:100]}...'")
                return fallback_content
            
            logger.info(f"‚úÖ Contenido de IA aceptado: '{content[:100]}...'")
            return content
            
        except Exception as e:
            logger.error(f"Error en IA: {e}")
            raise
    
    def _is_ai_rejection(self, content: str) -> bool:
        """
        Detecta si la IA rechaz√≥ generar el contenido solicitado con patrones mejorados.
        
        Args:
            content: Respuesta de la IA
            
        Returns:
            bool: True si es un rechazo
        """
        if not content or not isinstance(content, str):
            return True
            
        content_lower = content.lower().strip()
        
        # Lista expandida de frases de rechazo (incluye el caso reportado por el usuario)
        rejection_phrases = [
            # Spanish rejections - Basic
            "no puedo generar contenido",
            "no puedo crear contenido", 
            "lo siento, pero no",
            "lo siento pero no",
            "lo siento, no puedo",
            "lo siento pero no puedo",  # Patr√≥n espec√≠fico reportado
            "lo siento pero no puedo generar",
            "lo siento pero no puedo generar contenido",
            "lo siento pero no puedo generar contenido sobre",
            
            # Specific content types that get rejected
            "contenido sobre fakis",     # Caso espec√≠fico reportado por usuario
            "contenido sobre deepfakes",
            "contenido sobre suplementos",
            "promoci√≥n de alimentos",
            "promoci√≥n de suplementos",
            "contenido relacionado con la promoci√≥n",
            "contenido que promueva",
            
            # Other Spanish rejection patterns
            "no es apropiado",
            "no puedo proporcionar",
            "no puedo ayudar",
            "no est√° permitido",
            "no es recomendable",
            "evitar la promoci√≥n",
            "no puedo generar",
            "no puedo crear",
            "no puedo escribir",
            "¬øen qu√© puedo ayudarte?",
            "en qu√© puedo ayudarte",
            "como modelo de lenguaje",
            "como ia no puedo",
            "mi programaci√≥n no me permite",
            
            # English rejections
            "sorry, i can't",
            "i cannot generate",
            "i'm not able to",
            "i can't create",
            "i cannot create",
            "i'm sorry, but",
            "i apologize, but",
            "i can't generate content",
            "i cannot generate content about",
            "as an ai, i cannot",
            "as a language model",
            "against my programming"
        ]
        
        # Check for rejection phrases
        for phrase in rejection_phrases:
            if phrase in content_lower:
                logger.warning(f"üö´ Contenido rechazado detectado - Frase: '{phrase}' en: '{content_lower[:200]}...'")
                return True
        
        # Enhanced pattern detection with regex for more complex patterns
        import re
        
        rejection_patterns = [
            # Spanish patterns
            r"lo siento.*no puedo.*generar",
            r"no puedo.*generar.*contenido.*sobre",
            r"contenido.*sobre.*(?:fakis|deepfakes|suplementos)",
            r"como (?:modelo|ia).*no puedo",
            
            # English patterns
            r"sorry.*can(?:'t|not).*generate",
            r"i can(?:'t|not).*generate.*content.*about",
            r"as (?:an ai|a language model).*cannot"
        ]
        
        for pattern in rejection_patterns:
            if re.search(pattern, content_lower):
                logger.warning(f"üö´ Contenido rechazado - Patr√≥n regex: '{pattern}' en: '{content_lower[:200]}...'")
                return True
        
        # Check if content starts with common rejection starters
        rejection_starters = [
            "lo siento",
            "i'm sorry", 
            "i apologize",
            "disculpa",
            "perd√≥n",
            "no puedo",
            "i can't",
            "i cannot",
            "lamentablemente",
            "unfortunately"
        ]
        
        for starter in rejection_starters:
            if content_lower.startswith(starter):
                logger.warning(f"üö´ Contenido rechazado - Inicia con: '{starter}' - '{content_lower[:200]}...'")
                return True
        
        # Additional checks
        help_patterns = [
            "¬øen qu√© puedo ayudarte?",
            "en qu√© puedo ayudarte",
            "what can i help you with?",
            "how can i help you?"
        ]
        
        for pattern in help_patterns:
            if pattern in content_lower:
                logger.warning(f"üö´ Contenido rechazado - Pregunta de ayuda detectada: '{pattern}'")
                return True
            
        # Check for very short responses (likely rejections)
        if len(content.strip()) < 100:
            logger.warning(f"üö´ Contenido rechazado - Muy corto: {len(content)} chars - '{content_lower[:100]}'")
            return True
        
        # Check for high ratio of apology/refusal words
        word_count = len(content.split())
        if word_count > 0:
            rejection_words = ["sorry", "siento", "disculpa", "apologize", "lamento", 
                             "puedo", "can't", "cannot", "no", "not"]
            rejection_word_count = sum(1 for word in content_lower.split() 
                                     if any(rw in word for rw in rejection_words))
            rejection_ratio = rejection_word_count / word_count
            
            if rejection_ratio > 0.4:  # More than 40% rejection-related words
                logger.warning(f"üö´ Contenido rechazado - Alto ratio de palabras de rechazo: {rejection_ratio:.2f}")
                return True
            
        return False
    
    def _generate_fallback_content(self, request: ContentRequest) -> str:
        """
        Genera contenido gen√©rico cuando la IA rechaza la solicitud.
        
        Args:
            request: Solicitud original
            
        Returns:
            str: Contenido gen√©rico pero v√°lido
        """
        logger.info("üîÑ Generando contenido alternativo gen√©rico...")
        
        import random
        
        # Multiple templates for variety
        fallback_options = [
            {
                "title": "üöÄ TOP 5 Datos del Espacio Que Te Dejar√°n Sin Palabras",
                "narration": """¬øPensabas que conoc√≠as el universo? ¬°Prep√°rate para alucinar!
                
                Primero: J√∫piter es tan masivo que no orbita alrededor del Sol, sino que ambos orbitan un punto com√∫n en el espacio.
                
                Segundo: En el espacio, los metales se sueldan autom√°ticamente si se tocan. Se llama soldadura en fr√≠o.
                
                Tercero: Un d√≠a en Venus dura m√°s que su a√±o. ¬°Su rotaci√≥n es m√°s lenta que su √≥rbita!
                
                Cuarto: Hay una nube de alcohol en el espacio de 1000 veces el tama√±o de nuestro sistema solar.
                
                Y quinto: Los astronautas crecen hasta 5 cent√≠metros en el espacio porque la gravedad no comprime su columna.
                
                ¬øCu√°l te vol√≥ la mente? ¬°S√≠gueme para m√°s secretos del cosmos!"""
            },
            {
                "title": "üß† TOP 5 Hechos Sobre el Cerebro Humano Que Te Impactar√°n",
                "narration": """Tu cerebro es m√°s incre√≠ble de lo que imaginas. ¬°Estos datos te lo demostrar√°n!
                
                Primero: Tu cerebro usa solo el 20% de la energ√≠a de tu cuerpo, pero consume el 20% de todo el ox√≠geno.
                
                Segundo: Tienes m√°s conexiones neuronales que estrellas en la V√≠a L√°ctea. ¬°86 mil millones de neuronas!
                
                Tercero: El cerebro no tiene receptores de dolor. Por eso las cirug√≠as cerebrales pueden hacerse despierto.
                
                Cuarto: Puedes recordar hasta 2.5 petabytes de informaci√≥n. Eso son 3 millones de horas de video.
                
                Y quinto: Tu cerebro genera 20 watts de energ√≠a. ¬°Suficiente para encender una bombilla LED!
                
                ¬øSab√≠as estos datos? ¬°Dale like si te sorprendieron y s√≠gueme para m√°s!"""
            },
            {
                "title": "üåä TOP 5 Misterios del Oc√©ano Que Desaf√≠an la Ciencia",
                "narration": """El oc√©ano guarda secretos m√°s extra√±os que cualquier pel√≠cula de ciencia ficci√≥n.
                
                Primero: Solo hemos explorado el 5% de los oc√©anos. Conocemos mejor la superficie de Marte.
                
                Segundo: Hay r√≠os y lagos DENTRO del oc√©ano. Se forman por diferencias de salinidad y temperatura.
                
                Tercero: El oc√©ano produce m√°s del 70% del ox√≠geno que respiramos, no los √°rboles como muchos creen.
                
                Cuarto: Existe una zona llamada 'Punto Nemo' donde lo m√°s cercano son astronautas en el espacio.
                
                Y quinto: Hay criaturas que brillan en la oscuridad y otras que pueden vivir sin ox√≠geno.
                
                ¬øTe atrever√≠as a explorar estas profundidades? ¬°S√≠gueme para m√°s misterios marinos!"""
            },
            {
                "title": "‚ö° TOP 5 Inventos Que Cambiaron el Mundo por Accidente",
                "narration": """Estos inventos revolucionarios nacieron de errores geniales que transformaron la humanidad.
                
                Primero: La penicilina se descubri√≥ porque Alexander Fleming dej√≥ una placa de cultivo sucia por error.
                
                Segundo: El microondas se invent√≥ cuando un ingeniero not√≥ que su chocolate se derriti√≥ cerca de un radar.
                
                Tercero: Los Post-it nacieron de un pegamento 'fallido' que no pegaba lo suficientemente fuerte.
                
                Cuarto: El marcapasos se cre√≥ por error mientras intentaban grabar sonidos del coraz√≥n.
                
                Y quinto: El Velcro se inspir√≥ en las semillas que se pegaban al perro de su inventor durante un paseo.
                
                ¬øIncre√≠ble verdad? ¬°Los mejores descubrimientos a veces son accidentales! ¬°S√≠gueme para m√°s!"""
            }
        ]
        
        # Select random template for variety
        selected_template = random.choice(fallback_options)
        
        fallback_templates = {
            "TOP_5": selected_template,
            "CURIOSIDADES": selected_template
        }
        
        # Seleccionar template apropiado
        template = fallback_templates.get(request.content_type, fallback_templates["TOP_5"])
        
        # Formatear contenido con estructura completa
        fallback_content = f"""T√çTULO: {template['title']}

NARRACI√ìN: {template['narration']}

DESCRIPCI√ìN: Descubre datos incre√≠bles que te sorprender√°n. ¬°Contenido educativo y entretenido para toda la familia! #Shorts #Curiosidades #DatosCuriosos

TAGS: curiosidades, datos curiosos, educativo, entretenido, viral, shorts, incre√≠ble, sorprendente

THUMBNAIL: Texto grande con n√∫meros, expresi√≥n de sorpresa, colores llamativos"""
        
        return fallback_content
    
    def _extract_title(self, script: str) -> str:
        """Extrae el t√≠tulo del gui√≥n generado con mejor detecci√≥n de rechazos."""
        if not script or not isinstance(script, str):
            return "TOP 5 - Contenido Incre√≠ble"
            
        # PROTECCI√ìN: Si el script contiene frases de rechazo, usar t√≠tulo por defecto
        script_lower = script.lower()
        rejection_indicators = [
            "lo siento", "no puedo", "i'm sorry", "i can't", 
            "contenido sobre", "generar contenido", "crear contenido"
        ]
        
        if any(indicator in script_lower for indicator in rejection_indicators):
            logger.warning(f"üö´ T√≠tulo extra√≠do de contenido con rechazo detectado - Usando t√≠tulo por defecto")
            return "üöÄ TOP 5 Datos Incre√≠bles Que Te Sorprender√°n"
        
        lines = script.split('\n')
        for line in lines:
            if 't√≠tulo' in line.lower() or 'title' in line.lower():
                # Buscar despu√©s de dos puntos
                if ':' in line:
                    title = line.split(':', 1)[1].strip().strip('"\'')
                    # Verificar que el t√≠tulo extra√≠do no sea un rechazo
                    if not any(indicator in title.lower() for indicator in rejection_indicators):
                        return title
        
        # Fallback: primera l√≠nea no vac√≠a que no sea un rechazo
        for line in lines:
            if (line.strip() and 
                not line.startswith('#') and 
                not any(indicator in line.lower() for indicator in rejection_indicators)):
                return line.strip()[:100]  # M√°ximo 100 chars
        
        # √öltimo recurso: t√≠tulo por defecto
        return "üöÄ TOP 5 Datos Incre√≠bles Que Te Sorprender√°n"
    
    def _extract_narration(self, script: str) -> str:
        """Extrae SOLO la narraci√≥n pura del contenido generado con protecci√≥n contra rechazos."""
        if not script or not isinstance(script, str):
            return "Descubre datos incre√≠bles que te sorprender√°n. ¬°Contenido educativo y entretenido!"
            
        # PROTECCI√ìN: Si el script contiene frases de rechazo, usar narraci√≥n por defecto
        script_lower = script.lower()
        rejection_indicators = [
            "lo siento", "no puedo", "i'm sorry", "i can't", 
            "contenido sobre", "generar contenido", "crear contenido"
        ]
        
        if any(indicator in script_lower for indicator in rejection_indicators):
            logger.warning(f"üö´ Narraci√≥n extra√≠da de contenido con rechazo detectado - Usando narraci√≥n por defecto")
            return """¬øSab√≠as que existen datos incre√≠bles que la mayor√≠a de personas no conoce? 
            Hoy te traigo curiosidades que cambiar√°n tu perspectiva del mundo.
            
            Primero, los pulpos tienen tres corazones y sangre azul. ¬°Incre√≠ble!
            
            Segundo, un d√≠a en Venus dura m√°s que un a√±o venusiano. La rotaci√≥n es m√°s lenta que la √≥rbita.
            
            Tercero, las bananas son t√©cnicamente bayas, pero las fresas no. La ciencia puede ser confusa.
            
            ¬øCu√°l te sorprendi√≥ m√°s? ¬°D√©jamelo en los comentarios y s√≠gueme para m√°s curiosidades incre√≠bles!"""
        
        # Buscar la secci√≥n de NARRACI√ìN con diferentes formatos
        import re
        
        # Patr√≥n para encontrar la secci√≥n NARRACI√ìN
        narration_pattern = r'\*{0,2}NARRACI√ìN\*{0,2}:?\s*(["\"]?)([^"]*?)\1(?=\*{0,2}DESCRIPCI√ìN|\*{0,2}TAGS|\*{0,2}THUMBNAIL|$)'
        
        match = re.search(narration_pattern, script, re.IGNORECASE | re.DOTALL)
        if match:
            narration = match.group(2).strip()
            # Limpiar asteriscos y caracteres extra
            narration = re.sub(r'\*{2,}', '', narration)
            narration = narration.strip()
            
            # Verificar que la narraci√≥n extra√≠da no sea un rechazo
            if not any(indicator in narration.lower() for indicator in rejection_indicators):
                return narration
            else:
                logger.warning(f"üö´ Narraci√≥n extra√≠da contiene rechazo - Usando narraci√≥n por defecto")
                return """¬øSab√≠as que existen datos incre√≠bles que cambiar√°n tu d√≠a? 
                Descubre curiosidades fascinantes sobre nuestro mundo.
                ¬°S√≠gueme para m√°s contenido incre√≠ble que te dejar√° sin palabras!"""
        
        # Fallback: si no encuentra NARRACI√ìN, buscar patrones comunes
        lines = script.split('\n')
        narration_lines = []
        capturing = False
        
        for line in lines:
            line = line.strip()
            
            # Empezar a capturar despu√©s de NARRACI√ìN, GUI√ìN, etc.
            if any(keyword in line.lower() for keyword in ['narraci√≥n:', 'gui√≥n:', '**narraci√≥n**']):
                capturing = True
                # Si hay contenido despu√©s de los dos puntos, incluirlo
                if ':' in line:
                    content_after = line.split(':', 1)[1].strip()
                    if content_after and not content_after.startswith('*'):
                        narration_lines.append(content_after)
                continue
            
            # Parar de capturar en la siguiente secci√≥n
            if capturing and line and any(line.lower().startswith(keyword) for keyword in ['**descripci√≥n', '**tags', '**thumbnail', 'descripci√≥n:', 'tags:', 'thumbnail:']):
                break
            
            # Capturar l√≠neas de narraci√≥n (evitar l√≠neas con solo asteriscos)
            if capturing and line and not line.startswith('**') and line != '':
                narration_lines.append(line)
        
        if narration_lines:
            result = ' '.join(narration_lines)
            # Limpiar comillas al principio y final
            result = result.strip('"').strip("'").strip()
            return result
        
        # Si no encontr√≥ nada, usar todo el script como fallback
        return script
    
    def _generate_description(self, script: str, topic: str) -> str:
        """Genera descripci√≥n optimizada para YouTube."""
        
        description_prompt = f"""
        Bas√°ndote en este gui√≥n de YouTube sobre "{topic}", crea una descripci√≥n optimizada:

        GUI√ìN:
        {script[:500]}...

        REQUISITOS para la descripci√≥n:
        1. M√°ximo 200 palabras
        2. Incluir palabras clave SEO
        3. Call-to-action para suscribirse
        4. Mencionar contenido relacionado
        5. Incluir hashtags relevantes
        6. Tono amigable y profesional

        DESCRIPCI√ìN:
        """
        
        # Usar Ollama si est√° disponible, sino fallback simple
        if self.use_ollama and self.ollama_generator:
            try:
                response = self.ollama_generator.generate_content(description_prompt)
                if response and len(response) > 50:
                    return response.strip()
            except Exception as e:
                logger.warning(f"Ollama fall√≥ para descripci√≥n: {e}")
        
        # Fallback simple sin OpenAI
        return f"Descubre datos incre√≠bles sobre {topic}. ¬°Sigue para m√°s contenido viral! #Shorts #Curiosidades #Top5"
    
    def _generate_tags(self, topic: str, content_type: str) -> List[str]:
        """Genera tags relevantes para YouTube."""
        
        base_tags = [
            "top 10",
            "curiosidades", 
            "datos curiosos",
            "espa√±ol",
            "interesante",
            "viral",
            "educativo"
        ]
        
        # Tags espec√≠ficos por tema
        topic_words = topic.lower().split()
        for word in topic_words:
            if len(word) > 3:  # Solo palabras significativas
                base_tags.append(word)
        
        # Tags por tipo de contenido
        if content_type == "TOP_5":
            base_tags.extend(["ranking", "mejores", "lista"])
        elif content_type == "CURIOSIDADES":
            base_tags.extend(["incre√≠ble", "sorprendente", "sab√≠as que"])
        
        return list(set(base_tags))[:15]  # M√°ximo 15 tags √∫nicos
    
    def _generate_thumbnail_ideas(self, topic: str) -> List[str]:
        """Genera ideas para thumbnails."""
        
        return [
            f"Texto grande: 'TOP 10 {topic.upper()}'",
            "Expresi√≥n facial sorprendida",
            "N√∫meros grandes y coloridos (10, 1)",
            "Flechas y elementos llamativos",
            f"Im√°genes representativas de {topic}",
            "Colores contrastantes (rojo, amarillo)"
        ]
    
    def _estimate_duration(self, script: str) -> int:
        """Estima duraci√≥n en segundos basada en palabras."""
        # Promedio: 150 palabras por minuto en espa√±ol
        words = len(script.split())
        return int((words / 150) * 60)
    
    def _calculate_seo_score(self, title: str, description: str, tags: List[str]) -> float:
        """Calcula un score b√°sico de SEO (0-100)."""
        score = 0.0
        
        # T√≠tulo optimizado (30 puntos)
        if len(title) >= 30 and len(title) <= 70:
            score += 15
        if any(keyword in title.lower() for keyword in ["top", "mejor", "incre√≠ble"]):
            score += 15
        
        # Descripci√≥n optimizada (30 puntos)
        if len(description) >= 100:
            score += 15
        if "suscr√≠bete" in description.lower():
            score += 15
        
        # Tags relevantes (40 puntos)
        if len(tags) >= 5:
            score += 20
        if len(tags) <= 15:
            score += 20
        
        return min(score, 100.0)

def quick_generate(topic: str, content_type: str = "TOP_5") -> GeneratedContent:
    """
    Funci√≥n de utilidad para generar contenido r√°pidamente.
    
    Args:
        topic: Tema del contenido
        content_type: Tipo de contenido ("TOP_5" o "CURIOSIDADES")
    
    Returns:
        GeneratedContent: Contenido generado
    """
    generator = ContentGenerator()
    request = ContentRequest(
        content_type=content_type,
        topic=topic
    )
    return generator.generate_content(request)

# Ejemplo de uso
if __name__ == "__main__":
    # Configurar logging para testing
    logging.basicConfig(level=logging.INFO)
    
    # Ejemplo de generaci√≥n
    try:
        content = quick_generate("animales m√°s peligrosos del mundo", "TOP_5")
        print(f"T√≠tulo: {content.title}")
        print(f"Duraci√≥n estimada: {content.estimated_duration}s")
        print(f"SEO Score: {content.seo_score}")
        print(f"Tags: {', '.join(content.tags[:5])}...")
    except Exception as e:
        print(f"Error: {e}")
        print("Recuerda configurar OPENAI_API_KEY en tu archivo .env")